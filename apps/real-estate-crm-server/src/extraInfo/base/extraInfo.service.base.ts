/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExtraInfo as PrismaExtraInfo,
  Property as PrismaProperty,
} from "@prisma/client";

export class ExtraInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExtraInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.extraInfo.count(args);
  }

  async extraInfos<T extends Prisma.ExtraInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtraInfoFindManyArgs>
  ): Promise<PrismaExtraInfo[]> {
    return this.prisma.extraInfo.findMany<Prisma.ExtraInfoFindManyArgs>(args);
  }
  async extraInfo<T extends Prisma.ExtraInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtraInfoFindUniqueArgs>
  ): Promise<PrismaExtraInfo | null> {
    return this.prisma.extraInfo.findUnique(args);
  }
  async createExtraInfo<T extends Prisma.ExtraInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtraInfoCreateArgs>
  ): Promise<PrismaExtraInfo> {
    return this.prisma.extraInfo.create<T>(args);
  }
  async updateExtraInfo<T extends Prisma.ExtraInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtraInfoUpdateArgs>
  ): Promise<PrismaExtraInfo> {
    return this.prisma.extraInfo.update<T>(args);
  }
  async deleteExtraInfo<T extends Prisma.ExtraInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExtraInfoDeleteArgs>
  ): Promise<PrismaExtraInfo> {
    return this.prisma.extraInfo.delete(args);
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.extraInfo
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }
}
