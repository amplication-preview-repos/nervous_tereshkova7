/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExtraInfo } from "./ExtraInfo";
import { ExtraInfoCountArgs } from "./ExtraInfoCountArgs";
import { ExtraInfoFindManyArgs } from "./ExtraInfoFindManyArgs";
import { ExtraInfoFindUniqueArgs } from "./ExtraInfoFindUniqueArgs";
import { CreateExtraInfoArgs } from "./CreateExtraInfoArgs";
import { UpdateExtraInfoArgs } from "./UpdateExtraInfoArgs";
import { DeleteExtraInfoArgs } from "./DeleteExtraInfoArgs";
import { Property } from "../../property/base/Property";
import { ExtraInfoService } from "../extraInfo.service";
@graphql.Resolver(() => ExtraInfo)
export class ExtraInfoResolverBase {
  constructor(protected readonly service: ExtraInfoService) {}

  async _extraInfosMeta(
    @graphql.Args() args: ExtraInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExtraInfo])
  async extraInfos(
    @graphql.Args() args: ExtraInfoFindManyArgs
  ): Promise<ExtraInfo[]> {
    return this.service.extraInfos(args);
  }

  @graphql.Query(() => ExtraInfo, { nullable: true })
  async extraInfo(
    @graphql.Args() args: ExtraInfoFindUniqueArgs
  ): Promise<ExtraInfo | null> {
    const result = await this.service.extraInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExtraInfo)
  async createExtraInfo(
    @graphql.Args() args: CreateExtraInfoArgs
  ): Promise<ExtraInfo> {
    return await this.service.createExtraInfo({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExtraInfo)
  async updateExtraInfo(
    @graphql.Args() args: UpdateExtraInfoArgs
  ): Promise<ExtraInfo | null> {
    try {
      return await this.service.updateExtraInfo({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExtraInfo)
  async deleteExtraInfo(
    @graphql.Args() args: DeleteExtraInfoArgs
  ): Promise<ExtraInfo | null> {
    try {
      return await this.service.deleteExtraInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: ExtraInfo
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
