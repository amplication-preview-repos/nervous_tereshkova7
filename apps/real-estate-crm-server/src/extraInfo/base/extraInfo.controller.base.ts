/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExtraInfoService } from "../extraInfo.service";
import { ExtraInfoCreateInput } from "./ExtraInfoCreateInput";
import { ExtraInfo } from "./ExtraInfo";
import { ExtraInfoFindManyArgs } from "./ExtraInfoFindManyArgs";
import { ExtraInfoWhereUniqueInput } from "./ExtraInfoWhereUniqueInput";
import { ExtraInfoUpdateInput } from "./ExtraInfoUpdateInput";

export class ExtraInfoControllerBase {
  constructor(protected readonly service: ExtraInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExtraInfo })
  async createExtraInfo(
    @common.Body() data: ExtraInfoCreateInput
  ): Promise<ExtraInfo> {
    return await this.service.createExtraInfo({
      data: {
        ...data,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        key: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExtraInfo] })
  @ApiNestedQuery(ExtraInfoFindManyArgs)
  async extraInfos(@common.Req() request: Request): Promise<ExtraInfo[]> {
    const args = plainToClass(ExtraInfoFindManyArgs, request.query);
    return this.service.extraInfos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExtraInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async extraInfo(
    @common.Param() params: ExtraInfoWhereUniqueInput
  ): Promise<ExtraInfo | null> {
    const result = await this.service.extraInfo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExtraInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExtraInfo(
    @common.Param() params: ExtraInfoWhereUniqueInput,
    @common.Body() data: ExtraInfoUpdateInput
  ): Promise<ExtraInfo | null> {
    try {
      return await this.service.updateExtraInfo({
        where: params,
        data: {
          ...data,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          key: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExtraInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExtraInfo(
    @common.Param() params: ExtraInfoWhereUniqueInput
  ): Promise<ExtraInfo | null> {
    try {
      return await this.service.deleteExtraInfo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
